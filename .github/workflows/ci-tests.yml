name: CI testing

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: [master]
  pull_request: {}

defaults:
  run:
    shell: bash

jobs:

  pytest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Something is wrong with windows tests, will need to debug separately.
        os: [ubuntu-20.04, macOS-11]
        # todo: seems there are some issues with py3.10 while install dependencies
        python-version: ["3.7", "3.9"]
        requires: ['oldest', 'latest']

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    # the reason for high number is MUCH slower tests on macOS and py3.8
    timeout-minutes: 50

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Github Actions: Run step on specific OS: https://stackoverflow.com/a/57948488/4521646
    - name: Setup macOS
      if: runner.os == 'macOS'
      run: |
        brew update  # Todo: find a better way...
        brew install libomp  # https://github.com/pytorch/pytorch/issues/20030
        brew install rar

    - name: Setup Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y unrar

    - name: Set min. dependencies
      if: matrix.requires == 'oldest'
      run: |
        import os, glob
        ls = ['requirements.txt'] + glob.glob(os.path.join("requirements", "*.txt"))
        for fpath in ls:
            req = open(fpath).read().replace('>=', '==')
            open(fpath, 'w').write(req)
      shell: python

    - name: Install package
      run: |
        pip install -U pip
        pip install -e . --upgrade --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
        pip list

    - name: Test Package [only]
      run: |
        pip install pytest -q
        # TODO: package shall be fine to run full without any ignores
        python -m pytest pl_bolts \
          --ignore=pl_bolts/datamodules \
          --ignore=pl_bolts/datasets \
          --ignore=pl_bolts/models/self_supervised/amdim/transforms.py \
          --ignore=pl_bolts/models/rl

    - name: Get pip cache dir
      id: pip-cache
      run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.requires }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements/modules.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.requires }}-

    - name: Install dependencies
      run: |
        pip install --requirement requirements/devel.txt --upgrade --quiet \
          --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
        pip list

    - name: Cache datasets
      uses: actions/cache@v3
      with:
        path: ./datasets
        key: pl-datasets-${{ hashFiles('tests/conftest.py') }}

    - name: Download ROMs
      continue-on-error: true
      run: |
        wget http://www.atarimania.com/roms/Roms.rar -O datasets/Roms.rar
        cd datasets
        unrar x -y Roms.rar
        python -m atari_py.import_roms ROMS

    - name: Tests
      run: |
        python -m pytest tests -v --cov=pl_bolts \
          --junitxml=junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml

    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
        path: junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: always()

    - name: Statistics
      if: success()
      run: |
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      # see: https://github.com/actions/toolkit/issues/399
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
        flags: cpu,pytest
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false
