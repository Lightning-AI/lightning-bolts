trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - master
      - release/*
      - refs/tags/*
pr:
  - master
  - release/*

jobs:
  - job: testing
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "45"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"

    pool: lit-rtx-3090
    variables:
      DEVICES: $( python -c 'name = "$(Agent.Name)" ; gpus = name.split("_")[-1] if "_" in name else "0,1"; print(gpus)' )
      DEBIAN_FRONTEND: "noninteractive"
      TZ: "Europe/Amsterdam"
      TORCH_HOME: "/var/tmp/torch"
      TRANSFORMERS_CACHE: "/var/tmp/huggingface"
      FREEZE_REQUIREMENTS: 1

    container:
      #image: "pytorchlightning/pytorch_lightning:base-cuda-py3.9-torch1.12-cuda11.6.1"
      image: "pytorch/pytorch:1.12.1-cuda11.3-cudnn8-runtime"
      #endpoint: azureContainerRegistryConnection
      options: "--gpus=all --shm-size=16g -v /usr/bin/docker:/tmp/docker:ro -v /var/tmp:/var/tmp"

    workspace:
      clean: all

    steps:

    - bash: |
        echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
        echo "##vso[task.setvariable variable=CONTAINER_ID]$(head -1 /proc/self/cgroup|cut -d/ -f3)"
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
      displayName: 'Set environment variables'

    - script: |
        /tmp/docker exec -t -u 0 $CONTAINER_ID \
          sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - bash: |
        whereis nvidia
        nvidia-smi
        echo $CUDA_VISIBLE_DEVICES
        echo $CONTAINER_ID
        python --version
        pip list
      displayName: 'Image info & NVIDIA'

    - bash: |
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu >= 2, f'GPU: {mgpu}'"
      displayName: 'Sanity check'

    - bash: |
        set -ex
        # Box2D requirement for swig
        sudo apt-get remove swig -y
        sudo apt-get install swig3.0 -y
        sudo ln -s /usr/bin/swig3.0 /usr/bin/swig

        sudo apt-get update --fix-missing
        sudo apt-get install -y curl unrar cmake zlib1g-dev

        CUDA_VERSION_MM=$(python -c "import torch ; print(''.join(map(str, torch.version.cuda.split('.')[:2])))")
        TORCH_VERSION=$(python -c "import torch ; print(torch.__version__)")

        pip install "pip==21.2.3"  # todo: drop after resolving extras
        pip install . "torch==$TORCH_VERSION" -r ./requirements/devel.txt \
            --find-links https://download.pytorch.org/whl/cu${CUDA_VERSION_MM}/torch_stable.html
        pip list
      displayName: 'Install pkg & dependencies'

    - bash: |
        set -ex
        mkdir -p datasets
        cd datasets
        curl http://www.atarimania.com/roms/Roms.rar -o Roms.rar
        unrar x -y Roms.rar
        python -m atari_py.import_roms ROMS
      displayName: Download ROMs

    - bash: |
        python -m pytest pl_bolts tests -v --cov=pl_bolts --junitxml=$(Build.StagingDirectory)/test-results.xml --durations=30
      displayName: 'Testing'

    - bash: |
        python -m coverage report
        python -m coverage xml
        python -m codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) --flags=gpu,pytest --name="GPU-coverage" --env=linux,azure
        ls -l
      displayName: 'Statistics'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFiles: '$(Build.StagingDirectory)/test-results.xml'
        testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()

#    - task: PublishCodeCoverageResults@1
#      displayName: 'Publish coverage report'
#      inputs:
#        codeCoverageTool: 'Cobertura'
#        summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
#        reportDirectory: '$(Build.SourcesDirectory)/htmlcov'
#        testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
#      condition: succeededOrFailed()
